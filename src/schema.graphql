#Type Definitions (application schema)
#5 scalar types, String, Boolean, Int, Float, ID (unique identifier)

type Query {
    me: User!
    users(query: String): [User!]
    posts(query: String): [Post!]
    comments(query: String): [Comment!]
    greeting(name: String): String!
    grades: [Int!]!
    add(numbers:[Float!]!): Float!
}

type Mutation {
    createUser(data: CreateUserInput): AuthPayload!
    updateUser(id: ID!, data: UpdateUserInput): User!
    deleteUser(id: ID!): User!
    createPost(data: CreatePostInput):Post!
    updatePost(id: ID!, data:UpdatePostInput): Post!
    deletePost(id: ID!): Post!
    createComment(data: CreateCommentInput): Comment!
    updateComment(id: ID!, data: UpdateCommentInput): Comment!
    deleteComment(id: ID!): Comment!

}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
}

input CreatePostInput {
    title: String!
    body: String!
    author: ID!
    published: Boolean!
}

input UpdatePostInput {
    title: String
    body: String
    author: ID
    published: Boolean
}

input CreateCommentInput {
    text: String!
    author: ID!
    post: ID!
}

input UpdateCommentInput {
    text: String
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID!
    title: String!
    body: String
    author: User!
    published: Boolean
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}

type Subscription {
    count: Int!
    comment(postId: ID!): CommentSubscriptionPayload!
    post(author: ID!): PostSubscriptionPayload!
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment

}